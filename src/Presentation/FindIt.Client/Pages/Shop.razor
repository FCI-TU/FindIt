@page "/products"

<div class="container-fluid py-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <h6 class="fw-bold text-primary mb-3 mt-4">Brands</h6>
            <ul class="list-group">
                <li class="list-group-item @((SelectedBrand == "All" ? "active" : ""))" @onclick="@(() => FilterByBrand("All"))" style="cursor: pointer;">
                    All
                </li>
                <li class="list-group-item @((SelectedBrand == "Penguin Random House" ? "active" : ""))" @onclick="@(() => FilterByBrand("Penguin Random House"))" style="cursor: pointer;">
                    Penguin Random House
                </li>
                <li class="list-group-item @((SelectedBrand == "HarperCollins" ? "active" : ""))" @onclick="@(() => FilterByBrand("HarperCollins"))" style="cursor: pointer;">
                    HarperCollins
                </li>
                <li class="list-group-item @((SelectedBrand == "Simon & Schuster" ? "active" : ""))" @onclick="@(() => FilterByBrand("Simon & Schuster"))" style="cursor: pointer;">
                    Simon & Schuster
                </li>
            </ul>


            <!-- Categories Section -->
            <h6 class="fw-bold text-primary mb-3 mt-4">Categories</h6>
            <ul class="list-group">
                <li class="list-group-item @((SelectedCategory == null ? "active" : ""))" @onclick="@(() => FilterByCategory(null))" style="cursor: pointer;">
                    All
                </li>
                <li class="list-group-item @((SelectedCategory == "Books" ? "active" : ""))" @onclick="@(() => FilterByCategory("Books"))" style="cursor: pointer;">
                    Books
                </li>
                <li class="list-group-item @((SelectedCategory == "Movies" ? "active" : ""))" @onclick="@(() => FilterByCategory("Movies"))" style="cursor: pointer;">
                    Movies
                </li>
                <li class="list-group-item @((SelectedCategory == "Games" ? "active" : ""))" @onclick="@(() => FilterByCategory("Games"))" style="cursor: pointer;">
                    Games
                </li>
            </ul>


        </div>

        <!-- Product Section -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h6 class="fw-bold">Showing @FilteredProducts.Count Results</h6>
                </div>
                <div class="d-flex align-items-center">
                    <select class="form-select me-2" style="width: 150px;" @onchange="SortProducts">
                        <option value="alphabetical">Alphabetical</option>
                        <option value="price-asc">Price (Low to High)</option>
                        <option value="price-desc">Price (High to Low)</option>
                    </select>
                    <input class="form-control me-2" type="search" placeholder="Search products..." @bind="SearchQuery" @oninput="SearchProducts" style="width: 200px;" />
                    <button class="btn btn-light" @onclick="SearchProducts"><i class="bi bi-search"></i></button>
                </div>
            </div>

            <div class="row g-4">
                @foreach (var product in FilteredProducts)
                {
                    <div class="col-sm-6 col-md-4">
                        <div class="card h-100">
                            <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" />
                            <div class="card-body d-flex flex-column">
                                <h6 class="fw-bold text-primary">@product.Name</h6>
                                <p class="text-muted small">@product.Description</p>
                                <p class="text-success fw-bold mb-3">$@product.Price</p>
                                <div class="mt-auto">
                                    <button class="btn btn-primary w-100 mb-2">Add to Cart</button>
                                    <button class="btn btn-outline-primary w-100">View Details</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<string> Brands = new List<string>
    {
        "Penguin Random House", "HarperCollins", "Simon & Schuster", "Walt Disney", "Warner Bros. Pictures"
    };

    private List<Product> Products = new List<Product>
{
    new Product { Name = "Inception", Description = "A sci-fi action film about a thief who infiltrates the subconscious of his targets.", Price = 19.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Warner Bros. Pictures", Category = "Movies" },
    new Product { Name = "Minecraft", Description = "A sandbox video game where players can build and explore virtual worlds made of blocks.", Price = 29.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Microsoft", Category = "Games" },
    new Product { Name = "Moby Dick", Description = "A novel by Herman Melville about Captain Ahab's obsessive quest to hunt the giant white whale.", Price = 9.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Penguin Random House", Category = "Books" },
    new Product { Name = "The Lion King", Description = "A classic animated movie about the journey of Simba to become king.", Price = 14.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Walt Disney", Category = "Movies" },
    new Product { Name = "The Hobbit", Description = "A fantasy novel by J.R.R. Tolkien about the adventures of Bilbo Baggins.", Price = 12.99, ImageUrl = "https://via.placeholder.com/150", Brand = "HarperCollins", Category = "Books" },
    new Product { Name = "Super Mario Bros.", Description = "A classic platform video game featuring Mario and Luigi.", Price = 39.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Nintendo", Category = "Games" },
    new Product { Name = "The Dark Knight", Description = "A movie about Batman facing his nemesis, the Joker.", Price = 19.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Warner Bros. Pictures", Category = "Movies" },
    new Product { Name = "Pride and Prejudice", Description = "A classic novel by Jane Austen about love and social standing.", Price = 10.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Penguin Random House", Category = "Books" },
    new Product { Name = "Call of Duty", Description = "A popular first-person shooter game.", Price = 49.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Microsoft", Category = "Games" },
    new Product { Name = "Frozen", Description = "An animated movie about two sisters and their magical journey.", Price = 14.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Walt Disney", Category = "Movies" },
    new Product { Name = "1984", Description = "A dystopian novel by George Orwell exploring totalitarianism.", Price = 8.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Penguin Random House", Category = "Books" },
    new Product { Name = "FIFA 23", Description = "A football simulation game loved worldwide.", Price = 59.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Sony", Category = "Games" },
    new Product { Name = "The Matrix", Description = "A sci-fi movie exploring the boundaries of reality.", Price = 15.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Warner Bros. Pictures", Category = "Movies" },
    new Product { Name = "The Great Gatsby", Description = "A novel by F. Scott Fitzgerald about the American dream.", Price = 9.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Simon & Schuster", Category = "Books" },
    new Product { Name = "Zelda: Breath of the Wild", Description = "An open-world action-adventure game.", Price = 59.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Nintendo", Category = "Games" },
    new Product { Name = "Toy Story", Description = "An animated movie about toys that come to life.", Price = 14.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Walt Disney", Category = "Movies" },
    new Product { Name = "To Kill a Mockingbird", Description = "A novel by Harper Lee exploring themes of racism and justice.", Price = 11.99, ImageUrl = "https://via.placeholder.com/150", Brand = "HarperCollins", Category = "Books" },
    new Product { Name = "Assassin's Creed", Description = "An action-adventure game with historical themes.", Price = 39.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Microsoft", Category = "Games" },
    new Product { Name = "The Avengers", Description = "A movie about a team of superheroes saving the world.", Price = 19.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Walt Disney", Category = "Movies" },
    new Product { Name = "Jane Eyre", Description = "A novel by Charlotte Bronte about an orphan's journey of self-discovery.", Price = 10.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Penguin Random House", Category = "Books" },
    new Product { Name = "Halo Infinite", Description = "A sci-fi first-person shooter game.", Price = 49.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Microsoft", Category = "Games" },
    new Product { Name = "Harry Potter and the Sorcerer's Stone", Description = "A movie about a young wizard's journey at Hogwarts.", Price = 19.99, ImageUrl = "https://via.placeholder.com/150", Brand = "Warner Bros. Pictures", Category = "Movies" }
};


    private List<Product> FilteredProducts = new List<Product>();
    private string SelectedBrand = "All";
    private string SelectedCategory = null;
    private string SearchQuery = "";

    protected override void OnInitialized()
    {
        FilteredProducts = Products.ToList();
    }

    private void FilterByBrand(string brand)
    {
        SelectedBrand = brand;
        ApplyFilters();
    }

    private void FilterByCategory(string category)
    {
        SelectedCategory = category;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        FilteredProducts = Products
            .Where(p =>
                (SelectedBrand == "All" || p.Brand == SelectedBrand) &&
                (SelectedCategory == null || p.Category == SelectedCategory) &&
                (string.IsNullOrWhiteSpace(SearchQuery) || p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
    }

    private void SortProducts(ChangeEventArgs e)
    {
        var sortOption = e.Value?.ToString();
        if (sortOption == "alphabetical")
        {
            FilteredProducts = FilteredProducts.OrderBy(p => p.Name).ToList();
        }
        else if (sortOption == "price-asc")
        {
            FilteredProducts = FilteredProducts.OrderBy(p => p.Price).ToList();
        }
        else if (sortOption == "price-desc")
        {
            FilteredProducts = FilteredProducts.OrderByDescending(p => p.Price).ToList();
        }
    }

    private void SearchProducts()
    {
        ApplyFilters();
    }

    public class Product
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public double Price { get; set; }
        public string ImageUrl { get; set; }
        public string Brand { get; set; }
        public string Category { get; set; }
    }
}
